package com.example.chessgame.logic;

import com.example.chessgame.model.Piece;
import com.example.chessgame.model.Piece.Type;

/**
 * ‚úÖ GameManager.java (Final Fixed Version)
 *
 * Qu·∫£n l√Ω to√†n b·ªô tr·∫°ng th√°i v√°n c·ªù:
 *  - L∆∞u tr·ªØ b√†n c·ªù, tr·∫°ng th√°i l∆∞·ª£t, l·ªãch s·ª≠ n∆∞·ªõc ƒëi
 *  - Ki·ªÉm tra th·∫Øng / thua / h√≤a, bao g·ªìm c·∫£ chi·∫øu b√≠ (checkmate) v√† b√≠ h√≤a (stalemate)
 *  - Cung c·∫•p API cho UI (ChessBoardView, ChessActivity)
 */
public class GameManager {
    // ----- Bi·∫øn n·ªôi b·ªô -----
    private final Board board;                // ƒê·ªëi t∆∞·ª£ng Board l∆∞u ma tr·∫≠n qu√¢n c·ªù
    private final MoveValidator validator;    // Ki·ªÉm tra h·ª£p l·ªá n∆∞·ªõc ƒëi
    private boolean whiteTurn = true;         // true = Tr·∫Øng ƒëi, false = ƒêen ƒëi

    private final java.util.Stack<HistoryEntry> history = new java.util.Stack<>();
    private boolean gameOver = false;         // true n·∫øu v√°n ƒë√£ k·∫øt th√∫c
    private String winner = "";               // "Tr·∫Øng" | "ƒêen" | "H√≤a" | ""

    // ----- Constructor -----
    public GameManager() {
        board = new Board();
        validator = new MoveValidator(board);
    }

    // Getter ƒë·ªÉ l·ªõp kh√°c d√πng
    public Board getBoard() { return board; }
    public boolean isWhiteTurn() { return whiteTurn; }
    public boolean isGameOver() { return gameOver; }
    public String getWinner() { return winner; }
    public MoveValidator getValidator() { return validator; }

    // ===============================================================
    // ‚è™ C·∫•u tr√∫c l∆∞u l·∫°i th√¥ng tin 1 n∆∞·ªõc ƒëi ƒë·ªÉ UNDO
    // ===============================================================
    private static class HistoryEntry {
        public Board.MoveBackup mainBackup;
        public boolean isEnPassant = false;
        public Piece enPassantCapturedPiece = null;
        public int enPassantCapturedRow = -1, enPassantCapturedCol = -1;

        public boolean isCastling = false;
        public Board.MoveBackup rookBackup = null;

        public boolean isPromotion = false;
        public Piece promotedPawnOriginal = null;

        public boolean previousGameOver = false;
        public String previousWinner = "";
        public boolean previousWhiteTurn = true;
    }

    // ===============================================================
    // ‚ôüÔ∏è tryMove(): Th·ª±c hi·ªán n∆∞·ªõc ƒëi n·∫øu h·ª£p l·ªá
    // ===============================================================
    public boolean tryMove(int fr, int fc, int tr, int tc) {
        // 1Ô∏è‚É£ N·∫øu v√°n ƒë√£ k·∫øt th√∫c -> kh√¥ng cho ƒëi
        if (gameOver) return false;

        // 2Ô∏è‚É£ L·∫•y qu√¢n ngu·ªìn; n·∫øu tr·ªëng -> invalid
        Piece moved = board.getPiece(fr, fc);
        if (moved == null) return false;

        // 3Ô∏è‚É£ Ki·ªÉm tra h·ª£p l·ªá n∆∞·ªõc ƒëi (theo lu·∫≠t + an to√†n vua)
        if (!validator.isValidMove(fr, fc, tr, tc, whiteTurn)) return false;

        // 4Ô∏è‚É£ L∆∞u snapshot ƒë·ªÉ UNDO sau n√†y
        HistoryEntry he = new HistoryEntry();
        he.previousGameOver = gameOver;
        he.previousWinner = winner;
        he.previousWhiteTurn = whiteTurn;

        // 5Ô∏è‚É£ Ki·ªÉm tra En Passant
        boolean isEnPassant = false;
        Piece enPassantCaptured = null;
        int enPassantRow = -1, enPassantCol = -1;
        Piece directCaptured = board.getPiece(tr, tc);

        if (moved.getType() == Type.PAWN && Math.abs(tc - fc) == 1 && Math.abs(tr - fr) == 1 && directCaptured == null) {
            int[] eps = validator.getEnPassantSquare();
            if (eps != null && eps[0] == tr && eps[1] == tc) {
                isEnPassant = true;
                enPassantRow = moved.isWhite() ? tr + 1 : tr - 1;
                enPassantCol = tc;
                enPassantCaptured = board.getPiece(enPassantRow, enPassantCol);
                board.placePiece(enPassantRow, enPassantCol, null); // x√≥a qu√¢n b·ªã ƒÉn t·∫°m
            }
        }

        // 6Ô∏è‚É£ Th·ª±c hi·ªán n∆∞·ªõc ƒëi th·∫≠t s·ª±
        Board.MoveBackup mainBackup = board.makeMove(fr, fc, tr, tc);
        he.mainBackup = mainBackup;

        // N·∫øu l√† En Passant -> l∆∞u l·∫°i
        if (isEnPassant) {
            he.isEnPassant = true;
            he.enPassantCapturedPiece = enPassantCaptured;
            he.enPassantCapturedRow = enPassantRow;
            he.enPassantCapturedCol = enPassantCol;
        }

        // 7Ô∏è‚É£ Ki·ªÉm tra Promotion (phong h·∫≠u)
        if (mainBackup.movedPiece != null && mainBackup.movedPiece.getType() == Type.PAWN) {
            int toRow = mainBackup.toR;
            if ((mainBackup.movedPiece.isWhite() && toRow == 0) || (!mainBackup.movedPiece.isWhite() && toRow == 7)) {
                he.isPromotion = true;
                he.promotedPawnOriginal = mainBackup.movedPiece;
                board.placePiece(toRow, mainBackup.toC,
                        new Piece(Type.QUEEN, mainBackup.movedPiece.isWhite(), toRow, mainBackup.toC));
            }
        }

        // 8Ô∏è‚É£ Nh·∫≠p th√†nh (Castling)
        if (mainBackup.movedPiece != null &&
                mainBackup.movedPiece.getType() == Type.KING &&
                Math.abs(mainBackup.toC - mainBackup.fromC) == 2) {

            boolean kingSide = mainBackup.toC > mainBackup.fromC;
            int rookFrom = kingSide ? 7 : 0;
            int rookTo = kingSide ? mainBackup.toC - 1 : mainBackup.toC + 1;
            Board.MoveBackup rookBackup = board.makeMove(mainBackup.fromR, rookFrom, mainBackup.fromR, rookTo);
            he.isCastling = true;
            he.rookBackup = rookBackup;
        }

        // 9Ô∏è‚É£ L∆∞u l·∫°i v√†o stack l·ªãch s·ª≠
        history.push(he);

        // ===============================================================
        // ‚öñÔ∏è C·∫≠p nh·∫≠t tr·∫°ng th√°i v√°n ƒë·∫•u (win / lose / draw / checkmate)
        // ===============================================================

        // ‚ùó1. N·∫øu m·∫•t vua tr·∫Øng => ƒêen th·∫Øng
        if (!hasKing(true)) {
            gameOver = true;
            winner = "ƒêen";
        }
        // ‚ùó2. N·∫øu m·∫•t vua ƒëen => Tr·∫Øng th·∫Øng
        else if (!hasKing(false)) {
            gameOver = true;
            winner = "Tr·∫Øng";
        }
        // ‚ùó3. N·∫øu ch·ªâ c√≤n hai vua => H√≤a
        else if (onlyKingsLeft()) {
            gameOver = true;
            winner = "H√≤a";
        }
        // ‚ùó4. N·∫øu chi·∫øu h·∫øt (checkmate)
        else if (validator.isCheckmate(!whiteTurn)) {
            gameOver = true;
            winner = whiteTurn ? "Tr·∫Øng" : "ƒêen"; // ng∆∞·ªùi v·ª´a ƒëi l√† ng∆∞·ªùi th·∫Øng
        }
        // ‚ùó5. N·∫øu kh√¥ng b·ªã chi·∫øu nh∆∞ng kh√¥ng c√≤n n∆∞·ªõc ƒëi h·ª£p l·ªá => h√≤a (stalemate)
        else if (!validator.isKingInCheck(!whiteTurn)) {
            boolean hasLegalMove = false;

            // Ki·ªÉm tra to√†n b·ªô b√†n xem b√™n kia c√≤n n∆∞·ªõc h·ª£p l·ªá kh√¥ng
            for (int r = 0; r < 8 && !hasLegalMove; r++) {
                for (int c = 0; c < 8 && !hasLegalMove; c++) {
                    Piece p = board.getPiece(r, c);
                    if (p != null && p.isWhite() == !whiteTurn) {
                        for (int tr2 = 0; tr2 < 8 && !hasLegalMove; tr2++) {
                            for (int tc2 = 0; tc2 < 8 && !hasLegalMove; tc2++) {
                                if (validator.isValidMove(r, c, tr2, tc2, !whiteTurn)) {
                                    hasLegalMove = true;
                                }
                            }
                        }
                    }
                }
            }

            if (!hasLegalMove) {
                gameOver = true;
                winner = "H√≤a";
            }
        }

        // üîÅ 10Ô∏è‚É£ N·∫øu game ch∆∞a k·∫øt th√∫c -> ƒë·ªïi l∆∞·ª£t
        if (!gameOver) whiteTurn = !whiteTurn;

        return true; // ‚úÖ Move h·ª£p l·ªá, ƒë√£ th·ª±c hi·ªán xong
    }

    // ===============================================================
    // ‚è™ Undo (ho√†n t√°c n∆∞·ªõc ƒëi)
    // ===============================================================
    public boolean undo() {
        if (history.isEmpty()) return false;
        HistoryEntry he = history.pop();

        if (he.isCastling && he.rookBackup != null)
            board.undoMove(he.rookBackup);

        if (he.mainBackup != null)
            board.undoMove(he.mainBackup);

        if (he.isEnPassant && he.enPassantCapturedPiece != null)
            board.placePiece(he.enPassantCapturedRow, he.enPassantCapturedCol, he.enPassantCapturedPiece);

        if (he.isPromotion && he.promotedPawnOriginal != null) {
            int toR = he.mainBackup.toR, toC = he.mainBackup.toC;
            board.placePiece(toR, toC, he.promotedPawnOriginal);
            he.promotedPawnOriginal.setPosition(toR, toC);
        }

        gameOver = he.previousGameOver;
        winner = he.previousWinner;
        whiteTurn = he.previousWhiteTurn;
        return true;
    }

    // ===============================================================
    // üîç Ki·ªÉm tra tr·∫°ng th√°i b√†n c·ªù
    // ===============================================================
    private boolean hasKing(boolean whiteKing) {
        for (int r = 0; r < 8; r++) {
            for (int c = 0; c < 8; c++) {
                Piece p = board.getPiece(r, c);
                if (p != null && p.getType() == Type.KING && p.isWhite() == whiteKing)
                    return true;
            }
        }
        return false;
    }

    private boolean onlyKingsLeft() {
        int pieceCount = 0, kingCount = 0;
        for (int r = 0; r < 8; r++) {
            for (int c = 0; c < 8; c++) {
                Piece p = board.getPiece(r, c);
                if (p != null) {
                    pieceCount++;
                    if (p.getType() == Type.KING) kingCount++;
                }
            }
        }
        return (pieceCount == 2 && kingCount == 2);
    }

    public int getTotalMoves() {
        return history.size();
    }

    // ===============================================================
    // üîÅ Reset b√†n c·ªù v·ªÅ tr·∫°ng th√°i ban ƒë·∫ßu
    // ===============================================================
    public void reset() {
        board.reset();
        history.clear();
        whiteTurn = true;
        gameOver = false;
        winner = "";
    }
}
