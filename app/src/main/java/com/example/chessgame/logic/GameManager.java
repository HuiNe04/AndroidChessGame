package com.example.chessgame.logic;

import com.example.chessgame.model.Piece;
import com.example.chessgame.model.Piece.Type;

/**
 * GameManager.java
 *
 * üí° Nhi·ªám v·ª•:
 *  - Qu·∫£n l√Ω to√†n b·ªô tr·∫°ng th√°i v√°n c·ªù (board, l∆∞·ª£t ƒëi, l·ªãch s·ª≠, th·∫Øng/thua/h√≤a)
 *  - Giao ti·∫øp gi·ªØa l·ªõp hi·ªÉn th·ªã (ChessBoardView / ChessActivity) v√† logic x·ª≠ l√Ω (MoveValidator)
 *  - Cung c·∫•p h√†m tryMove(), undo(), reset() ƒë·ªÉ ƒëi·ªÅu khi·ªÉn gameplay
 */
public class GameManager {
    private final Board board;                 // L∆∞u tr·∫°ng th√°i b√†n c·ªù (ma tr·∫≠n Piece[8][8])
    private final MoveValidator validator;    // D√πng ƒë·ªÉ ki·ªÉm tra n∆∞·ªõc ƒëi h·ª£p l·ªá
    private boolean whiteTurn = true;         // true = l∆∞·ª£t Tr·∫Øng, false = l∆∞·ª£t ƒêen

    // Stack l∆∞u to√†n b·ªô l·ªãch s·ª≠ n∆∞·ªõc ƒëi ‚Äî h·ªó tr·ª£ Undo ch√≠nh x√°c
    private final java.util.Stack<HistoryEntry> history = new java.util.Stack<>();

    private boolean gameOver = false;         // true n·∫øu v√°n ƒë√£ k·∫øt th√∫c
    private String winner = "";               // "Tr·∫Øng", "ƒêen", ho·∫∑c "H√≤a"

    // ------------------------------
    // Constructor
    // ------------------------------
    public GameManager() {
        board = new Board();                  // T·∫°o b√†n c·ªù m·ªõi (g·ªçi setupBoard())
        validator = new MoveValidator(board); // T·∫°o MoveValidator g·∫Øn v·ªõi board n√†y
    }

    // ------------------------------
    // Getter c∆° b·∫£n
    // ------------------------------
    public Board getBoard() { return board; }
    public boolean isWhiteTurn() { return whiteTurn; }
    public boolean isGameOver() { return gameOver; }
    public String getWinner() { return winner; }

    // ------------------------------
    // L·ªõp HistoryEntry: ghi nh·ªõ to√†n b·ªô th√¥ng tin c·ªßa 1 n∆∞·ªõc ƒëi
    // ------------------------------
    private static class HistoryEntry {
        public Board.MoveBackup mainBackup; // Backup c·ªßa di chuy·ªÉn ch√≠nh (from‚Üíto)
        public boolean isEnPassant = false; // C√≥ ph·∫£i en-passant kh√¥ng?
        public Piece enPassantCapturedPiece = null;
        public int enPassantCapturedRow = -1, enPassantCapturedCol = -1;

        public boolean isCastling = false;  // C√≥ ph·∫£i nh·∫≠p th√†nh kh√¥ng?
        public Board.MoveBackup rookBackup = null; // Backup cho rook di chuy·ªÉn

        public boolean isPromotion = false; // C√≥ phong c·∫•p kh√¥ng?
        public Piece promotedPawnOriginal = null;  // L∆∞u pawn g·ªëc tr∆∞·ªõc khi ƒë·ªïi th√†nh queen

        // L∆∞u tr·∫°ng th√°i game tr∆∞·ªõc n∆∞·ªõc ƒëi n√†y (ƒë·ªÉ undo ch√≠nh x√°c)
        public boolean previousGameOver = false;
        public String previousWinner = "";
        public boolean previousWhiteTurn;
    }

    // ------------------------------
    // TH·ª∞C HI·ªÜN 1 N∆Ø·ªöC ƒêI (tryMove)
    // ------------------------------
    public boolean tryMove(int fr, int fc, int tr, int tc) {
        if (gameOver) return false; // NgƒÉn kh√¥ng cho ƒëi ti·∫øp n·∫øu v√°n ƒë√£ k·∫øt th√∫c

        Piece moved = board.getPiece(fr, fc);
        if (moved == null) return false; // Kh√¥ng c√≥ qu√¢n n√†o ·ªü v·ªã tr√≠ xu·∫•t ph√°t

        // ‚úÖ B∆∞·ªõc 1: Ki·ªÉm tra h·ª£p l·ªá (kh√¥ng commit)
        if (!validator.isValidMove(fr, fc, tr, tc, whiteTurn)) return false;

        // ‚úÖ T·∫°o 1 b·∫£n ghi l·ªãch s·ª≠ ƒë·ªÉ l∆∞u to√†n b·ªô th√¥ng tin Undo
        HistoryEntry he = new HistoryEntry();
        he.previousGameOver = gameOver;
        he.previousWinner = winner;
        he.previousWhiteTurn = whiteTurn;

        // L∆∞u l·∫°i qu√¢n b·ªã ƒÉn tr·ª±c ti·∫øp (n·∫øu c√≥)
        Piece directCaptured = board.getPiece(tr, tc);

        // ---------------- En Passant ----------------
        boolean isEnPassant = false;
        Piece enPassantCaptured = null;
        int enPassantRow = -1, enPassantCol = -1;

        if (moved.getType() == Type.PAWN && Math.abs(tc - fc) == 1 && Math.abs(tr - fr) == 1 && directCaptured == null) {
            int[] eps = validator.getEnPassantSquare();
            if (eps != null && eps[0] == tr && eps[1] == tc) {
                isEnPassant = true;
                enPassantRow = moved.isWhite() ? tr + 1 : tr - 1;
                enPassantCol = tc;
                enPassantCaptured = board.getPiece(enPassantRow, enPassantCol);
                // X√≥a qu√¢n b·ªã ƒÉn (pawn ƒë·ªëi ph∆∞∆°ng) ·ªü √¥ en-passant
                board.placePiece(enPassantRow, enPassantCol, null);
            }
        }

        // ---------------- Th·ª±c hi·ªán di chuy·ªÉn ch√≠nh ----------------
        Board.MoveBackup mainBackup = board.makeMove(fr, fc, tr, tc);
        he.mainBackup = mainBackup;

        // N·∫øu l√† en-passant ‚Üí l∆∞u d·ªØ li·ªáu v√†o HistoryEntry ƒë·ªÉ Undo ƒë∆∞·ª£c
        if (isEnPassant) {
            he.isEnPassant = true;
            he.enPassantCapturedPiece = enPassantCaptured;
            he.enPassantCapturedRow = enPassantRow;
            he.enPassantCapturedCol = enPassantCol;
        }

        // ---------------- Promotion (phong c·∫•p) ----------------
        if (mainBackup.movedPiece != null && mainBackup.movedPiece.getType() == Type.PAWN) {
            int toRow = mainBackup.toR;
            if ((mainBackup.movedPiece.isWhite() && toRow == 0) || (!mainBackup.movedPiece.isWhite() && toRow == 7)) {
                he.isPromotion = true;
                he.promotedPawnOriginal = mainBackup.movedPiece;
                // T·ª± ƒë·ªông ƒë·ªïi th√†nh Queen
                board.placePiece(toRow, mainBackup.toC,
                        new Piece(Type.QUEEN, mainBackup.movedPiece.isWhite(), toRow, mainBackup.toC));
            }
        }

        // ---------------- Castling (nh·∫≠p th√†nh) ----------------
        if (mainBackup.movedPiece != null && mainBackup.movedPiece.getType() == Type.KING &&
                Math.abs(mainBackup.toC - mainBackup.fromC) == 2) {

            boolean kingSide = mainBackup.toC > mainBackup.fromC;
            int rookFrom = kingSide ? 7 : 0;
            int rookTo = kingSide ? mainBackup.toC - 1 : mainBackup.toC + 1;

            // Di chuy·ªÉn rook v√† l∆∞u backup ƒë·ªÉ Undo ƒë∆∞·ª£c
            Board.MoveBackup rookBackup = board.makeMove(mainBackup.fromR, rookFrom, mainBackup.fromR, rookTo);
            he.isCastling = true;
            he.rookBackup = rookBackup;
        }

        // ‚úÖ L∆∞u HistoryEntry v√†o stack
        history.push(he);

        // ---------------- Ki·ªÉm tra tr·∫°ng th√°i k·∫øt th√∫c ----------------
        if (!hasKing(true)) {
            gameOver = true;
            winner = "ƒêen th·∫Øng";
        } else if (!hasKing(false)) {
            gameOver = true;
            winner = "Tr·∫Øng th·∫Øng";
        }
        // ‚úÖ Th√™m ƒëi·ªÅu ki·ªán h√≤a khi ch·ªâ c√≤n 2 vua
        else if (onlyKingsLeft()) {
            gameOver = true;
            winner = "H√≤a (Ch·ªâ c√≤n hai vua)";
        }

        // ---------------- Chuy·ªÉn l∆∞·ª£t ----------------
        if (!gameOver) whiteTurn = !whiteTurn;

        return true;
    }

    // ------------------------------
    // UNDO 1 N∆Ø·ªöC ƒêI
    // ------------------------------
    public boolean undo() {
        if (history.isEmpty()) return false;
        HistoryEntry he = history.pop();

        // 1Ô∏è‚É£ Undo nh·∫≠p th√†nh (rook tr∆∞·ªõc)
        if (he.isCastling && he.rookBackup != null) {
            board.undoMove(he.rookBackup);
        }

        // 2Ô∏è‚É£ Undo n∆∞·ªõc ch√≠nh (tr·∫£ l·∫°i qu√¢n b·ªã ƒÉn, di chuy·ªÉn ng∆∞·ª£c)
        if (he.mainBackup != null) {
            board.undoMove(he.mainBackup);
        }

        // 3Ô∏è‚É£ N·∫øu l√† en-passant ‚Üí ph·ª•c h·ªìi qu√¢n b·ªã ƒÉn (pawn ƒë·ªëi ph∆∞∆°ng)
        if (he.isEnPassant && he.enPassantCapturedPiece != null) {
            board.placePiece(he.enPassantCapturedRow, he.enPassantCapturedCol, he.enPassantCapturedPiece);
        }

        // 4Ô∏è‚É£ N·∫øu c√≥ promotion ‚Üí ƒë·ªïi l·∫°i t·ª´ Queen v·ªÅ pawn g·ªëc
        if (he.isPromotion && he.promotedPawnOriginal != null) {
            int toR = he.mainBackup.toR;
            int toC = he.mainBackup.toC;
            board.placePiece(toR, toC, he.promotedPawnOriginal);
            he.promotedPawnOriginal.setPosition(toR, toC);
        }

        // 5Ô∏è‚É£ Kh√¥i ph·ª•c tr·∫°ng th√°i tr∆∞·ªõc ƒë√≥ (l∆∞·ª£t, k·∫øt th√∫c, ng∆∞·ªùi th·∫Øng)
        this.gameOver = he.previousGameOver;
        this.winner = he.previousWinner;
        this.whiteTurn = he.previousWhiteTurn;

        return true;
    }

    // ------------------------------
    // Ki·ªÉm tra t·ªìn t·∫°i vua theo m√†u
    // ------------------------------
    private boolean hasKing(boolean whiteKing) {
        for (int r = 0; r < 8; r++) {
            for (int c = 0; c < 8; c++) {
                Piece p = board.getPiece(r, c);
                if (p != null && p.getType() == Type.KING && p.isWhite() == whiteKing)
                    return true;
            }
        }
        return false;
    }

    // ------------------------------
    // Ki·ªÉm tra h√≤a khi ch·ªâ c√≤n hai vua
    // ------------------------------
    private boolean onlyKingsLeft() {
        int pieceCount = 0;
        int kingCount = 0;
        for (int r = 0; r < 8; r++) {
            for (int c = 0; c < 8; c++) {
                Piece p = board.getPiece(r, c);
                if (p != null) {
                    pieceCount++;
                    if (p.getType() == Type.KING) kingCount++;
                }
            }
        }
        return (pieceCount == 2 && kingCount == 2);
    }

    // ------------------------------
    // L·∫•y t·ªïng s·ªë n∆∞·ªõc ƒë√£ ƒëi (ph·ª•c v·ª• th·ªëng k√™)
    // ------------------------------
    public int getTotalMoves() {
        return history.size();
    }

    // ------------------------------
    // Reset to√†n b·ªô v√°n m·ªõi
    // ------------------------------
    public void reset() {
        board.reset();        // ƒê·∫∑t l·∫°i to√†n b·ªô b√†n c·ªù
        history.clear();      // X√≥a l·ªãch s·ª≠
        whiteTurn = true;     // Tr·∫Øng ƒëi tr∆∞·ªõc
        gameOver = false;
        winner = "";
    }
}
